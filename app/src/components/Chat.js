import {withStyles} from '@material-ui/core/styles';
import React from 'react';
import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';

import {
    MainContainer,
    Sidebar,
    ConversationList,
    Conversation,
    Avatar,
    MessageGroup,
    Message,
    ChatContainer,
    ConversationHeader,
    MessageList,
    MessageInput,
    TypingIndicator
} from '@chatscope/chat-ui-kit-react';
import {
    useState,
    useCallback,
    useEffect,
    useMemo
} from 'react';
import {
    useChat,
    ChatMessage,
    MessageContentType,
    MessageDirection,
    MessageStatus,
    MessageContent,
    TextContent,
    User
} from '@chatscope/use-chat';


const muiStyles = {
    form: {
        borderTop: '1px solid black',
        height: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        padding: '10px',
    },
    container: {
        height: '100vh',
        display: 'flex',
        flexDirection: 'column',
        padding: '10px'
    },
    chat: {
        height: '95%',
    },
    text: {
        width: '80%',
        height: '100%',
        border: 'none',
        fontFamily: 'Roboto',
        fontSize: '15px'
    },
    sendButton: {
        width: '10%',
        height: '100%',
        backgroundColor: '#fff',
        borderColor: '#1D2129',
        borderStyle: 'solid',
        borderRadius: 30,
        borderWidth: 2,
        color: '#1D2129',
        fontWeight: '300',
    }
};

const Chat = ({user}: { user: User }) => {

    // Message input value
    const [value,
        setValue] = useState('');

    const {
        currentMessages,

        conversations,
        activeConversation,
        setActiveConversation,
        sendMessage,
        getUser,
        currentMessage,
        setCurrentMessage,
        sendTyping,
        setCurrentUser
    } = useChat();

    useEffect(() => {
            setCurrentUser(user);
        },
        [user, setCurrentUser]);

    // Get current user data
    const [currentUserAvatar, currentUserName] = useMemo(() => {
        if (activeConversation) {
            const participant = activeConversation.participants.length > 0 ? activeConversation.participants[0] : undefined;

            if (participant) {
                const user = getUser(participant.id);
                if (user) {
                    return [<Avatar src={user.avatar}/>, user.username];
                }
            }
        }

        return [undefined, undefined];
    }, [activeConversation, getUser]);

    const handleChange = (value: string) => {
        // Send typing indicator to the active conversation
        // You can call this method on each onChange event
        // because sendTyping method can throttle sending this event
        // So typing event will not be send to often to the server
        setCurrentMessage(value);
        if (activeConversation) {
            sendTyping({
                conversationId: activeConversation?.id,
                isTyping: true,
                userId: user.id,
                content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
                throttle: true
            });
        }

    };
    const handleSend = (text: string) => {

        // Logger user (sender)
        const currentUserId = '123';

        const message = new ChatMessage({
            id: '', // Id will be generated by storage generator, so here you can pass an empty string
            content: text/* as unknown as MessageContent<TextContent>*/,
            contentType: MessageContentType.TextHtml,
            senderId: user.id,
            direction: MessageDirection.Outgoing,
            status: MessageStatus.Sent
        });

        if (activeConversation) {
            sendMessage({
                message,
                conversationId: activeConversation.id,
                senderId: user.id,
            });
        }
    };

    const getTypingIndicator = useCallback(() => {
            if (activeConversation) {
                const typingUsers = activeConversation.typingUsers;
                if (typingUsers.length > 0) {
                    const typingUserId = typingUsers.items[0].userId;

                    // Check if typing user participates in the conversation
                    if (activeConversation.participantExists(typingUserId)) {
                        const typingUser = getUser(typingUserId);

                        if (typingUser) {
                            return <TypingIndicator content={`${typingUser.username} is typing`}/>;
                        }
                    }
                }
            }

            return undefined;

        },
        [activeConversation, getUser],);

    return (<div style={{position: 'relative', height: '500px'}}>
        <MainContainer responsive>
            <Sidebar position="left" scrollable>
                <ConversationHeader style={{backgroundColor: '#fff'}}>
                    <Avatar src={user.avatar}/>
                    <ConversationHeader.Content>
                        {user.username}
                    </ConversationHeader.Content>
                </ConversationHeader>
                <ConversationList>
                    {conversations.map(c => {
                        // Helper for getting the data of the first participant
                        const [avatar, name] = (() => {
                            const participant = c.participants.length > 0 ? c.participants[0] : undefined;
                            if (participant) {
                                const user = getUser(participant.id);
                                if (user) {
                                    return [<Avatar src={user.avatar}/>, user.username];
                                }
                            }

                            return [undefined, undefined];
                        })();

                        return (<Conversation key={c.id}
                            name={name}
                            info={c.draft ? `Draft: ${c.draft.replace(/<br>/g, '\n').replace(/&nbsp;/g, ' ')}` : ``}
                            active={activeConversation?.id === c.id}
                            unreadCnt={c.unreadCounter}
                            onClick={(e) => setActiveConversation(c.id)}>
                            {avatar}
                        </Conversation>);
                    })}
                </ConversationList>
            </Sidebar>
            <ChatContainer>
                {activeConversation && <ConversationHeader>
                    {currentUserAvatar}
                    <ConversationHeader.Content userName={currentUserName}/>
                </ConversationHeader>}
                <ConversationHeader>
                    {currentUserAvatar}
                    <ConversationHeader.Content userName={currentUserName}/>
                </ConversationHeader>

                <MessageList typingIndicator={getTypingIndicator()}>
                    <Message
                        model={{
                            message: 'Hello my friend',
                            sentTime: 'just now',
                            sender: 'Joe',
                        }}
                    />
                    {activeConversation && currentMessages.map(g => <MessageGroup key={g.id} direction={g.direction}>
                        <MessageGroup.Messages>
                            {g.messages.map(m => <Message key={m.id} model={{
                                type: 'text',
                                payload: m.content
                            }}/>)}
                        </MessageGroup.Messages>
                    </MessageGroup>)}
                </MessageList>
                <MessageInput
                    placeholder="Type message here..."
                    value={currentMessage}
                    onChange={handleChange}
                    onSend={handleSend}
                    disabled={!activeConversation}
                    attachButton={false}
                />
            </ChatContainer>
        </MainContainer>
    </div>);
};

export const StyleChat = withStyles(muiStyles)(Chat);